name: Generate a CycloneDX SBOM and uploads it to Github
description: |
  Utilizes Trivy to generate a SBOM. This SBOM will then be archived and uploaded to Github.

inputs:
  aws-access-key-id:
    description: DEPRECATED. An AWS access key ID that has read permissions to the registry.
    required: false
    default: ''
  aws-secret-access-key:
    description: DEPRECATED. An AWS secret access key that has read permissions to the registry.
    required: false
    default: ''
  aws-region:
    description: AWS region for the registry.
    required: false
    default: ''
  image-name:
    description: The Docker image to run the checks on.
    required: true
  report-retention-days:
    description: Duration in days to preserve reports.
    required: true
    default: "5"
  role-to-assume:
    description: Role to assume that has read access to the registry.
    required: false
  role-session-name:
    description: Session name to use when assuming the role.
    required: false
  working-directory:
    description: Relative path under $GITHUB_WORKSPACE where the root project is located.
    required: false
    default: "."

runs:
  using: composite
  steps:
    - name: Action context
      shell: bash
      id: context
      run: |
        working_directory=$(realpath ${{ inputs.working-directory }})
        echo "working-directory=$working_directory" >> $GITHUB_OUTPUT
        echo "bom-path=$working_directory/build/reports/bom.json" >> $GITHUB_OUTPUT
        echo "has-role=${{ inputs.role-to-assume != '' }}" >> $GITHUB_OUTPUT
        echo "is-ecr=${{ inputs.aws-region != '' }}" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: steps.context.outputs.is-ecr == 'true'
      with:
        aws-access-key-id: ${{ steps.context.outputs.has-role != 'true' && inputs.aws-access-key-id || '' }}
        aws-secret-access-key: ${{ steps.context.outputs.has-role != 'true' && inputs.aws-secret-access-key || '' }}
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ inputs.role-session-name }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v1
      if: steps.context.outputs.is-ecr == 'true'

    - name: Generate Docker BOM
      working-directory: ${{ steps.context.outputs.working-directory }}
      shell: bash
      run: |
        set -euo pipefail

        docker pull "${{ inputs.image-name }}"
        ${{ github.action_path }}/files/docker-sbom.sh \
          -o "${{ steps.context.outputs.bom-path }}" \
          "${{ inputs.image-name }}"

        result=$?
        if [ $result -ne 0 ]; then
          exit $result
        fi

        # Add missing required 'job' attributes
        jq --arg id "${{ github.run_id }}" --arg ref "${{ github.ref }}" --arg sha ${{ github.sha }} '. += {job: {correlator: $ref, id: $id}, ref: $ref, sha: $sha}' "${{ steps.context.outputs.bom-path }}" > "${{ steps.context.outputs.bom-path }}.tmp"
        mv "${{ steps.context.outputs.bom-path }}.tmp" "${{ steps.context.outputs.bom-path }}"

        # Replace apk with alpine
        sed -i 's/pkg:apk/pkg:alpine/' "${{ steps.context.outputs.bom-path }}"

    - name: Archive BOM
      uses: actions/upload-artifact@v3
      if: "!cancelled()"
      with:
        name: docker-bom.json
        retention-days: ${{ inputs.report-retention-days }}
        path: ${{ steps.context.outputs.bom-path }}

    - name: Upload BOM
      shell: bash
      run: |
        set -euo pipefail

        curl -f -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer ${{ github.token }}" 'https://api.github.com/repos/'$GITHUB_REPOSITORY'/dependency-graph/snapshots' -d "@${{ steps.context.outputs.bom-path }}"
